
Ordi.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000124  00800200  00000918  000009ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000918  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000050  00800324  00800324  00000ad0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000ad0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000b00  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000e8  00000000  00000000  00000b40  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000161d  00000000  00000000  00000c28  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000df2  00000000  00000000  00002245  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000878  00000000  00000000  00003037  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000248  00000000  00000000  000038b0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000690  00000000  00000000  00003af8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000b04  00000000  00000000  00004188  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f0  00000000  00000000  00004c8c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	13 e0       	ldi	r17, 0x03	; 3
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e8 e1       	ldi	r30, 0x18	; 24
  fc:	f9 e0       	ldi	r31, 0x09	; 9
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a4 32       	cpi	r26, 0x24	; 36
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	23 e0       	ldi	r18, 0x03	; 3
 110:	a4 e2       	ldi	r26, 0x24	; 36
 112:	b3 e0       	ldi	r27, 0x03	; 3
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	a4 37       	cpi	r26, 0x74	; 116
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	ec d1       	rcall	.+984    	; 0x4f8 <main>
 120:	f9 c3       	rjmp	.+2034   	; 0x914 <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <ADC_init>:
	return(pwm == 1 || pwm == 0)? 1:0;
}
uint8_t PWM_valueValidate( uint8_t value )
{
	return(value>=0 && value <=100)? 1:0;
}
 124:	88 e0       	ldi	r24, 0x08	; 8
 126:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__TEXT_REGION_LENGTH__+0x70007b>
 12a:	87 e0       	ldi	r24, 0x07	; 7
 12c:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x70007a>
 130:	8f ef       	ldi	r24, 0xFF	; 255
 132:	80 93 7d 00 	sts	0x007D, r24	; 0x80007d <__TEXT_REGION_LENGTH__+0x70007d>
 136:	08 95       	ret

00000138 <ADC_read>:
 138:	80 68       	ori	r24, 0x80	; 128
 13a:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
 13e:	ea e7       	ldi	r30, 0x7A	; 122
 140:	f0 e0       	ldi	r31, 0x00	; 0
 142:	80 81       	ld	r24, Z
 144:	80 6c       	ori	r24, 0xC0	; 192
 146:	80 83       	st	Z, r24
 148:	80 81       	ld	r24, Z
 14a:	86 fd       	sbrc	r24, 6
 14c:	fd cf       	rjmp	.-6      	; 0x148 <ADC_read+0x10>
 14e:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x700078>
 152:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x700079>
 156:	ea e7       	ldi	r30, 0x7A	; 122
 158:	f0 e0       	ldi	r31, 0x00	; 0
 15a:	90 81       	ld	r25, Z
 15c:	9f 77       	andi	r25, 0x7F	; 127
 15e:	90 83       	st	Z, r25
 160:	90 e0       	ldi	r25, 0x00	; 0
 162:	98 2f       	mov	r25, r24
 164:	88 27       	eor	r24, r24
 166:	82 0f       	add	r24, r18
 168:	91 1d       	adc	r25, r1
 16a:	08 95       	ret

0000016c <configBit>:
 16c:	66 23       	and	r22, r22
 16e:	69 f0       	breq	.+26     	; 0x18a <configBit+0x1e>
 170:	40 b3       	in	r20, 0x10	; 16
 172:	21 e0       	ldi	r18, 0x01	; 1
 174:	30 e0       	ldi	r19, 0x00	; 0
 176:	b9 01       	movw	r22, r18
 178:	02 c0       	rjmp	.+4      	; 0x17e <configBit+0x12>
 17a:	66 0f       	add	r22, r22
 17c:	77 1f       	adc	r23, r23
 17e:	8a 95       	dec	r24
 180:	e2 f7       	brpl	.-8      	; 0x17a <configBit+0xe>
 182:	cb 01       	movw	r24, r22
 184:	84 2b       	or	r24, r20
 186:	80 bb       	out	0x10, r24	; 16
 188:	08 95       	ret
 18a:	40 b3       	in	r20, 0x10	; 16
 18c:	21 e0       	ldi	r18, 0x01	; 1
 18e:	30 e0       	ldi	r19, 0x00	; 0
 190:	b9 01       	movw	r22, r18
 192:	02 c0       	rjmp	.+4      	; 0x198 <configBit+0x2c>
 194:	66 0f       	add	r22, r22
 196:	77 1f       	adc	r23, r23
 198:	8a 95       	dec	r24
 19a:	e2 f7       	brpl	.-8      	; 0x194 <configBit+0x28>
 19c:	cb 01       	movw	r24, r22
 19e:	80 95       	com	r24
 1a0:	84 23       	and	r24, r20
 1a2:	80 bb       	out	0x10, r24	; 16
 1a4:	08 95       	ret

000001a6 <readBit>:
 1a6:	2f b1       	in	r18, 0x0f	; 15
 1a8:	30 e0       	ldi	r19, 0x00	; 0
 1aa:	a9 01       	movw	r20, r18
 1ac:	02 c0       	rjmp	.+4      	; 0x1b2 <readBit+0xc>
 1ae:	55 95       	asr	r21
 1b0:	47 95       	ror	r20
 1b2:	8a 95       	dec	r24
 1b4:	e2 f7       	brpl	.-8      	; 0x1ae <readBit+0x8>
 1b6:	ca 01       	movw	r24, r20
 1b8:	81 70       	andi	r24, 0x01	; 1
 1ba:	08 95       	ret

000001bc <writeBit>:
 1bc:	66 23       	and	r22, r22
 1be:	69 f0       	breq	.+26     	; 0x1da <writeBit+0x1e>
 1c0:	41 b3       	in	r20, 0x11	; 17
 1c2:	21 e0       	ldi	r18, 0x01	; 1
 1c4:	30 e0       	ldi	r19, 0x00	; 0
 1c6:	b9 01       	movw	r22, r18
 1c8:	02 c0       	rjmp	.+4      	; 0x1ce <writeBit+0x12>
 1ca:	66 0f       	add	r22, r22
 1cc:	77 1f       	adc	r23, r23
 1ce:	8a 95       	dec	r24
 1d0:	e2 f7       	brpl	.-8      	; 0x1ca <writeBit+0xe>
 1d2:	cb 01       	movw	r24, r22
 1d4:	84 2b       	or	r24, r20
 1d6:	81 bb       	out	0x11, r24	; 17
 1d8:	08 95       	ret
 1da:	41 b3       	in	r20, 0x11	; 17
 1dc:	21 e0       	ldi	r18, 0x01	; 1
 1de:	30 e0       	ldi	r19, 0x00	; 0
 1e0:	b9 01       	movw	r22, r18
 1e2:	02 c0       	rjmp	.+4      	; 0x1e8 <writeBit+0x2c>
 1e4:	66 0f       	add	r22, r22
 1e6:	77 1f       	adc	r23, r23
 1e8:	8a 95       	dec	r24
 1ea:	e2 f7       	brpl	.-8      	; 0x1e4 <writeBit+0x28>
 1ec:	cb 01       	movw	r24, r22
 1ee:	80 95       	com	r24
 1f0:	84 23       	and	r24, r20
 1f2:	81 bb       	out	0x11, r24	; 17
 1f4:	08 95       	ret

000001f6 <PWM_init>:
 1f6:	80 e8       	ldi	r24, 0x80	; 128
 1f8:	84 b9       	out	0x04, r24	; 4
 1fa:	80 e2       	ldi	r24, 0x20	; 32
 1fc:	83 bb       	out	0x13, r24	; 19
 1fe:	82 ea       	ldi	r24, 0xA2	; 162
 200:	84 bd       	out	0x24, r24	; 36
 202:	08 95       	ret

00000204 <strcomp>:
	}
	return 6;
}
uint8_t strcomp( char *str1, char *str2 )
{
	while( *str1 && *str2)
 204:	fc 01       	movw	r30, r24
 206:	20 81       	ld	r18, Z
 208:	22 23       	and	r18, r18
 20a:	c1 f0       	breq	.+48     	; 0x23c <strcomp+0x38>
 20c:	fb 01       	movw	r30, r22
 20e:	30 81       	ld	r19, Z
 210:	33 23       	and	r19, r19
 212:	d9 f0       	breq	.+54     	; 0x24a <strcomp+0x46>
	{
		if(*str1 != *str2)
 214:	23 13       	cpse	r18, r19
 216:	0e c0       	rjmp	.+28     	; 0x234 <strcomp+0x30>
 218:	dc 01       	movw	r26, r24
 21a:	11 96       	adiw	r26, 0x01	; 1
 21c:	31 96       	adiw	r30, 0x01	; 1
 21e:	02 c0       	rjmp	.+4      	; 0x224 <strcomp+0x20>
 220:	92 13       	cpse	r25, r18
 222:	0a c0       	rjmp	.+20     	; 0x238 <strcomp+0x34>
		{
			return 0;
		}
		str1++;
		str2++;
 224:	bf 01       	movw	r22, r30
	}
	return 6;
}
uint8_t strcomp( char *str1, char *str2 )
{
	while( *str1 && *str2)
 226:	9d 91       	ld	r25, X+
 228:	99 23       	and	r25, r25
 22a:	41 f0       	breq	.+16     	; 0x23c <strcomp+0x38>
 22c:	21 91       	ld	r18, Z+
 22e:	21 11       	cpse	r18, r1
 230:	f7 cf       	rjmp	.-18     	; 0x220 <strcomp+0x1c>
 232:	0b c0       	rjmp	.+22     	; 0x24a <strcomp+0x46>
	{
		if(*str1 != *str2)
		{
			return 0;
 234:	80 e0       	ldi	r24, 0x00	; 0
 236:	08 95       	ret
 238:	80 e0       	ldi	r24, 0x00	; 0
 23a:	08 95       	ret
		}
		str1++;
		str2++;
	}
	return( (*str1||*str2)&&((*str1 == '\0')||(*str2 == '\0')) )? 0:1;
 23c:	81 e0       	ldi	r24, 0x01	; 1
 23e:	fb 01       	movw	r30, r22
 240:	90 81       	ld	r25, Z
 242:	99 23       	and	r25, r25
 244:	41 f0       	breq	.+16     	; 0x256 <strcomp+0x52>
 246:	80 e0       	ldi	r24, 0x00	; 0
 248:	08 95       	ret
 24a:	81 e0       	ldi	r24, 0x01	; 1
 24c:	fb 01       	movw	r30, r22
 24e:	90 81       	ld	r25, Z
 250:	91 11       	cpse	r25, r1
 252:	01 c0       	rjmp	.+2      	; 0x256 <strcomp+0x52>
 254:	80 e0       	ldi	r24, 0x00	; 0
}
 256:	08 95       	ret

00000258 <getCommand>:
	}
	*substr = '\0';
	strcopy(str,temp);
}
uint8_t getCommand(char *str)
{
 258:	ef 92       	push	r14
 25a:	ff 92       	push	r15
 25c:	0f 93       	push	r16
 25e:	1f 93       	push	r17
 260:	cf 93       	push	r28
 262:	df 93       	push	r29
 264:	7c 01       	movw	r14, r24
 266:	00 e0       	ldi	r16, 0x00	; 0
 268:	12 e0       	ldi	r17, 0x02	; 2
	int i = 0;
 26a:	c0 e0       	ldi	r28, 0x00	; 0
 26c:	d0 e0       	ldi	r29, 0x00	; 0
	while( i < 6 )
	{
		if( strcomp(str,commandos[i]) )
 26e:	b8 01       	movw	r22, r16
 270:	c7 01       	movw	r24, r14
 272:	c8 df       	rcall	.-112    	; 0x204 <strcomp>
 274:	88 23       	and	r24, r24
 276:	11 f0       	breq	.+4      	; 0x27c <getCommand+0x24>
		{
			return i;
 278:	8c 2f       	mov	r24, r28
 27a:	07 c0       	rjmp	.+14     	; 0x28a <getCommand+0x32>
		}
		i++;
 27c:	21 96       	adiw	r28, 0x01	; 1
 27e:	06 5f       	subi	r16, 0xF6	; 246
 280:	1f 4f       	sbci	r17, 0xFF	; 255
	strcopy(str,temp);
}
uint8_t getCommand(char *str)
{
	int i = 0;
	while( i < 6 )
 282:	c6 30       	cpi	r28, 0x06	; 6
 284:	d1 05       	cpc	r29, r1
 286:	99 f7       	brne	.-26     	; 0x26e <getCommand+0x16>
		{
			return i;
		}
		i++;
	}
	return 6;
 288:	86 e0       	ldi	r24, 0x06	; 6
}
 28a:	df 91       	pop	r29
 28c:	cf 91       	pop	r28
 28e:	1f 91       	pop	r17
 290:	0f 91       	pop	r16
 292:	ff 90       	pop	r15
 294:	ef 90       	pop	r14
 296:	08 95       	ret

00000298 <atoi>:
	return( (*str1||*str2)&&((*str1 == '\0')||(*str2 == '\0')) )? 0:1;
}
uint16_t atoi( char *str )
{	
	uint16_t num = 0;
	while(*str)
 298:	fc 01       	movw	r30, r24
 29a:	20 81       	ld	r18, Z
 29c:	22 23       	and	r18, r18
 29e:	a9 f0       	breq	.+42     	; 0x2ca <atoi+0x32>
 2a0:	31 96       	adiw	r30, 0x01	; 1
 2a2:	80 e0       	ldi	r24, 0x00	; 0
 2a4:	90 e0       	ldi	r25, 0x00	; 0
	{
		num = (num*10)+((*str++)-'0');		
 2a6:	ac 01       	movw	r20, r24
 2a8:	44 0f       	add	r20, r20
 2aa:	55 1f       	adc	r21, r21
 2ac:	88 0f       	add	r24, r24
 2ae:	99 1f       	adc	r25, r25
 2b0:	88 0f       	add	r24, r24
 2b2:	99 1f       	adc	r25, r25
 2b4:	88 0f       	add	r24, r24
 2b6:	99 1f       	adc	r25, r25
 2b8:	84 0f       	add	r24, r20
 2ba:	95 1f       	adc	r25, r21
 2bc:	82 0f       	add	r24, r18
 2be:	91 1d       	adc	r25, r1
 2c0:	c0 97       	sbiw	r24, 0x30	; 48
	return( (*str1||*str2)&&((*str1 == '\0')||(*str2 == '\0')) )? 0:1;
}
uint16_t atoi( char *str )
{	
	uint16_t num = 0;
	while(*str)
 2c2:	21 91       	ld	r18, Z+
 2c4:	21 11       	cpse	r18, r1
 2c6:	ef cf       	rjmp	.-34     	; 0x2a6 <atoi+0xe>
 2c8:	08 95       	ret
	}
	return( (*str1||*str2)&&((*str1 == '\0')||(*str2 == '\0')) )? 0:1;
}
uint16_t atoi( char *str )
{	
	uint16_t num = 0;
 2ca:	80 e0       	ldi	r24, 0x00	; 0
 2cc:	90 e0       	ldi	r25, 0x00	; 0
	while(*str)
	{
		num = (num*10)+((*str++)-'0');		
	}
	return num;
}
 2ce:	08 95       	ret

000002d0 <itoa>:
void itoa( char *str, uint16_t num, uint8_t base )
{
 2d0:	0f 93       	push	r16
 2d2:	1f 93       	push	r17
 2d4:	cf 93       	push	r28
 2d6:	df 93       	push	r29
 2d8:	ec 01       	movw	r28, r24
 2da:	cb 01       	movw	r24, r22
	int i = 0, j = 0, aux;
	char dato;
	while( num )
 2dc:	00 97       	sbiw	r24, 0x00	; 0
 2de:	b9 f1       	breq	.+110    	; 0x34e <itoa+0x7e>
 2e0:	9e 01       	movw	r18, r28
 2e2:	2f 5f       	subi	r18, 0xFF	; 255
 2e4:	3f 4f       	sbci	r19, 0xFF	; 255
 2e6:	e0 e0       	ldi	r30, 0x00	; 0
 2e8:	f0 e0       	ldi	r31, 0x00	; 0
	{
		aux = num/base;
 2ea:	04 2f       	mov	r16, r20
 2ec:	10 e0       	ldi	r17, 0x00	; 0
 2ee:	01 c0       	rjmp	.+2      	; 0x2f2 <itoa+0x22>
		( (num%=base)>9 )?(*str++ = num+'7'):(*str++= num+'0');
		j++;
 2f0:	fa 01       	movw	r30, r20
{
	int i = 0, j = 0, aux;
	char dato;
	while( num )
	{
		aux = num/base;
 2f2:	b8 01       	movw	r22, r16
 2f4:	e8 d2       	rcall	.+1488   	; 0x8c6 <__udivmodhi4>
		( (num%=base)>9 )?(*str++ = num+'7'):(*str++= num+'0');
 2f6:	8a 30       	cpi	r24, 0x0A	; 10
 2f8:	91 05       	cpc	r25, r1
 2fa:	20 f0       	brcs	.+8      	; 0x304 <itoa+0x34>
 2fc:	d9 01       	movw	r26, r18
 2fe:	89 5c       	subi	r24, 0xC9	; 201
 300:	88 83       	st	Y, r24
 302:	03 c0       	rjmp	.+6      	; 0x30a <itoa+0x3a>
 304:	d9 01       	movw	r26, r18
 306:	80 5d       	subi	r24, 0xD0	; 208
 308:	88 83       	st	Y, r24
		j++;
 30a:	af 01       	movw	r20, r30
 30c:	4f 5f       	subi	r20, 0xFF	; 255
 30e:	5f 4f       	sbci	r21, 0xFF	; 255
 310:	2f 5f       	subi	r18, 0xFF	; 255
 312:	3f 4f       	sbci	r19, 0xFF	; 255
 314:	21 96       	adiw	r28, 0x01	; 1
		num = aux;	
 316:	86 2f       	mov	r24, r22
 318:	97 2f       	mov	r25, r23
}
void itoa( char *str, uint16_t num, uint8_t base )
{
	int i = 0, j = 0, aux;
	char dato;
	while( num )
 31a:	00 97       	sbiw	r24, 0x00	; 0
 31c:	49 f7       	brne	.-46     	; 0x2f0 <itoa+0x20>
		aux = num/base;
		( (num%=base)>9 )?(*str++ = num+'7'):(*str++= num+'0');
		j++;
		num = aux;	
	}
	*str = '\0';
 31e:	1c 92       	st	X, r1
	str-= j;
 320:	a4 1b       	sub	r26, r20
 322:	b5 0b       	sbc	r27, r21
	j--;
	while( i<j )
 324:	1e 16       	cp	r1, r30
 326:	1f 06       	cpc	r1, r31
 328:	9c f4       	brge	.+38     	; 0x350 <itoa+0x80>
 32a:	af 01       	movw	r20, r30
 32c:	31 96       	adiw	r30, 0x01	; 1
 32e:	ea 0f       	add	r30, r26
 330:	fb 1f       	adc	r31, r27
 332:	80 e0       	ldi	r24, 0x00	; 0
 334:	90 e0       	ldi	r25, 0x00	; 0
	{
		dato = str[i];
 336:	2c 91       	ld	r18, X
		str[i++] = str[j];
 338:	01 96       	adiw	r24, 0x01	; 1
 33a:	32 91       	ld	r19, -Z
 33c:	3d 93       	st	X+, r19
		str[j--] = dato;
 33e:	20 83       	st	Z, r18
		num = aux;	
	}
	*str = '\0';
	str-= j;
	j--;
	while( i<j )
 340:	9a 01       	movw	r18, r20
 342:	28 1b       	sub	r18, r24
 344:	39 0b       	sbc	r19, r25
 346:	82 17       	cp	r24, r18
 348:	93 07       	cpc	r25, r19
 34a:	ac f3       	brlt	.-22     	; 0x336 <itoa+0x66>
 34c:	01 c0       	rjmp	.+2      	; 0x350 <itoa+0x80>
		aux = num/base;
		( (num%=base)>9 )?(*str++ = num+'7'):(*str++= num+'0');
		j++;
		num = aux;	
	}
	*str = '\0';
 34e:	18 82       	st	Y, r1
	{
		dato = str[i];
		str[i++] = str[j];
		str[j--] = dato;
	}
}
 350:	df 91       	pop	r29
 352:	cf 91       	pop	r28
 354:	1f 91       	pop	r17
 356:	0f 91       	pop	r16
 358:	08 95       	ret

0000035a <strcopy>:
void strcopy( char *des, char *str )
{
	while( *str )
 35a:	fb 01       	movw	r30, r22
 35c:	20 81       	ld	r18, Z
 35e:	22 23       	and	r18, r18
 360:	41 f0       	breq	.+16     	; 0x372 <strcopy+0x18>
 362:	31 96       	adiw	r30, 0x01	; 1
	{
		*des++ = *str++;
 364:	01 96       	adiw	r24, 0x01	; 1
 366:	dc 01       	movw	r26, r24
 368:	11 97       	sbiw	r26, 0x01	; 1
 36a:	2c 93       	st	X, r18
		str[j--] = dato;
	}
}
void strcopy( char *des, char *str )
{
	while( *str )
 36c:	21 91       	ld	r18, Z+
 36e:	21 11       	cpse	r18, r1
 370:	f9 cf       	rjmp	.-14     	; 0x364 <strcopy+0xa>
	{
		*des++ = *str++;
	}
	*des = '\0';
 372:	fc 01       	movw	r30, r24
 374:	10 82       	st	Z, r1
 376:	08 95       	ret

00000378 <getcads>:
			strcopy(miscomandos[i++],tmp);
		}
	}while( *tmp != '\0');
}
void getcads( char *substr ,char *str )
{
 378:	0f 93       	push	r16
 37a:	1f 93       	push	r17
 37c:	cf 93       	push	r28
 37e:	df 93       	push	r29
 380:	ac 01       	movw	r20, r24
 382:	8b 01       	movw	r16, r22
	char *temp;
	temp = str;
	while( *temp == ' ') temp++;
 384:	db 01       	movw	r26, r22
 386:	8c 91       	ld	r24, X
 388:	80 32       	cpi	r24, 0x20	; 32
 38a:	d9 f4       	brne	.+54     	; 0x3c2 <getcads+0x4a>
 38c:	9b 01       	movw	r18, r22
 38e:	2f 5f       	subi	r18, 0xFF	; 255
 390:	3f 4f       	sbci	r19, 0xFF	; 255
 392:	f9 01       	movw	r30, r18
 394:	2f 5f       	subi	r18, 0xFF	; 255
 396:	3f 4f       	sbci	r19, 0xFF	; 255
 398:	90 81       	ld	r25, Z
 39a:	90 32       	cpi	r25, 0x20	; 32
 39c:	d1 f3       	breq	.-12     	; 0x392 <getcads+0x1a>
 39e:	12 c0       	rjmp	.+36     	; 0x3c4 <getcads+0x4c>
 3a0:	9e 01       	movw	r18, r28
 3a2:	2f 5f       	subi	r18, 0xFF	; 255
 3a4:	3f 4f       	sbci	r19, 0xFF	; 255
 3a6:	a9 01       	movw	r20, r18
	while( (*temp != ' ')&&(*temp != '\0') )
	{
		*substr++ = *temp++;
 3a8:	fd 01       	movw	r30, r26
 3aa:	98 83       	st	Y, r25
void getcads( char *substr ,char *str )
{
	char *temp;
	temp = str;
	while( *temp == ' ') temp++;
	while( (*temp != ' ')&&(*temp != '\0') )
 3ac:	9d 91       	ld	r25, X+
 3ae:	e9 01       	movw	r28, r18
 3b0:	29 2f       	mov	r18, r25
 3b2:	2f 7d       	andi	r18, 0xDF	; 223
 3b4:	a9 f7       	brne	.-22     	; 0x3a0 <getcads+0x28>
	{
		*substr++ = *temp++;
	}
	*substr = '\0';
 3b6:	da 01       	movw	r26, r20
 3b8:	1c 92       	st	X, r1
	strcopy(str,temp);
 3ba:	bf 01       	movw	r22, r30
 3bc:	c8 01       	movw	r24, r16
 3be:	cd df       	rcall	.-102    	; 0x35a <strcopy>
}
 3c0:	08 c0       	rjmp	.+16     	; 0x3d2 <getcads+0x5a>
	}while( *tmp != '\0');
}
void getcads( char *substr ,char *str )
{
	char *temp;
	temp = str;
 3c2:	fb 01       	movw	r30, r22
	while( *temp == ' ') temp++;
	while( (*temp != ' ')&&(*temp != '\0') )
 3c4:	90 81       	ld	r25, Z
 3c6:	99 23       	and	r25, r25
 3c8:	b1 f3       	breq	.-20     	; 0x3b6 <getcads+0x3e>
 3ca:	ea 01       	movw	r28, r20
 3cc:	df 01       	movw	r26, r30
 3ce:	11 96       	adiw	r26, 0x01	; 1
 3d0:	e7 cf       	rjmp	.-50     	; 0x3a0 <getcads+0x28>
	{
		*substr++ = *temp++;
	}
	*substr = '\0';
	strcopy(str,temp);
}
 3d2:	df 91       	pop	r29
 3d4:	cf 91       	pop	r28
 3d6:	1f 91       	pop	r17
 3d8:	0f 91       	pop	r16
 3da:	08 95       	ret

000003dc <breakstr>:
{
	return(value>=0 && value <=100)? 1:0;
}
//STRINGS===========================
void breakstr( char *str )
{
 3dc:	ef 92       	push	r14
 3de:	ff 92       	push	r15
 3e0:	0f 93       	push	r16
 3e2:	1f 93       	push	r17
 3e4:	cf 93       	push	r28
 3e6:	df 93       	push	r29
 3e8:	cd b7       	in	r28, 0x3d	; 61
 3ea:	de b7       	in	r29, 0x3e	; 62
 3ec:	2a 97       	sbiw	r28, 0x0a	; 10
 3ee:	0f b6       	in	r0, 0x3f	; 63
 3f0:	f8 94       	cli
 3f2:	de bf       	out	0x3e, r29	; 62
 3f4:	0f be       	out	0x3f, r0	; 63
 3f6:	cd bf       	out	0x3d, r28	; 61
 3f8:	8c 01       	movw	r16, r24
 3fa:	0f 2e       	mov	r0, r31
 3fc:	f2 e4       	ldi	r31, 0x42	; 66
 3fe:	ef 2e       	mov	r14, r31
 400:	f3 e0       	ldi	r31, 0x03	; 3
 402:	ff 2e       	mov	r15, r31
 404:	f0 2d       	mov	r31, r0
	char tmp[10];
	int i = 0;
	do{
		getcads(tmp,str);
 406:	b8 01       	movw	r22, r16
 408:	ce 01       	movw	r24, r28
 40a:	01 96       	adiw	r24, 0x01	; 1
 40c:	b5 df       	rcall	.-150    	; 0x378 <getcads>
		if(*tmp != '\0')
 40e:	89 81       	ldd	r24, Y+1	; 0x01
 410:	88 23       	and	r24, r24
 412:	59 f0       	breq	.+22     	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
		{
			strcopy(miscomandos[i++],tmp);
 414:	be 01       	movw	r22, r28
 416:	6f 5f       	subi	r22, 0xFF	; 255
 418:	7f 4f       	sbci	r23, 0xFF	; 255
 41a:	c7 01       	movw	r24, r14
 41c:	9e df       	rcall	.-196    	; 0x35a <strcopy>
 41e:	8a e0       	ldi	r24, 0x0A	; 10
 420:	e8 0e       	add	r14, r24
 422:	f1 1c       	adc	r15, r1
		}
	}while( *tmp != '\0');
 424:	89 81       	ldd	r24, Y+1	; 0x01
 426:	81 11       	cpse	r24, r1
 428:	ee cf       	rjmp	.-36     	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
}
 42a:	2a 96       	adiw	r28, 0x0a	; 10
 42c:	0f b6       	in	r0, 0x3f	; 63
 42e:	f8 94       	cli
 430:	de bf       	out	0x3e, r29	; 62
 432:	0f be       	out	0x3f, r0	; 63
 434:	cd bf       	out	0x3d, r28	; 61
 436:	df 91       	pop	r29
 438:	cf 91       	pop	r28
 43a:	1f 91       	pop	r17
 43c:	0f 91       	pop	r16
 43e:	ff 90       	pop	r15
 440:	ef 90       	pop	r14
 442:	08 95       	ret

00000444 <UART0_init>:
	*des = '\0';
}
//UART===============================
void UART0_init( void )
{
	UCSR0A = (1<<U2X0);
 444:	82 e0       	ldi	r24, 0x02	; 2
 446:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7000c0>
	UCSR0B = (1<<TXEN0)|(1<<RXEN0);
 44a:	88 e1       	ldi	r24, 0x18	; 24
 44c:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
	UCSR0C = (3<<UCSZ00);
 450:	86 e0       	ldi	r24, 0x06	; 6
 452:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7000c2>
	UBRR0 = 103;
 456:	87 e6       	ldi	r24, 0x67	; 103
 458:	90 e0       	ldi	r25, 0x00	; 0
 45a:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7000c5>
 45e:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7000c4>
 462:	08 95       	ret

00000464 <UART0_putchar>:
		UART0_putchar(*str++);
	}
}
void UART0_putchar( char dato )
{
	while( !(UCSR0A&(1<<UDRE0)) );
 464:	e0 ec       	ldi	r30, 0xC0	; 192
 466:	f0 e0       	ldi	r31, 0x00	; 0
 468:	90 81       	ld	r25, Z
 46a:	95 ff       	sbrs	r25, 5
 46c:	fd cf       	rjmp	.-6      	; 0x468 <UART0_putchar+0x4>
	UDR0 = dato;
 46e:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
 472:	08 95       	ret

00000474 <UART0_puts>:
	UCSR0B = (1<<TXEN0)|(1<<RXEN0);
	UCSR0C = (3<<UCSZ00);
	UBRR0 = 103;
}
void UART0_puts( char *str )
{
 474:	cf 93       	push	r28
 476:	df 93       	push	r29
 478:	ec 01       	movw	r28, r24
	while( *str )
 47a:	88 81       	ld	r24, Y
 47c:	88 23       	and	r24, r24
 47e:	29 f0       	breq	.+10     	; 0x48a <UART0_puts+0x16>
	{
		UART0_putchar(*str++);
 480:	21 96       	adiw	r28, 0x01	; 1
	UCSR0C = (3<<UCSZ00);
	UBRR0 = 103;
}
void UART0_puts( char *str )
{
	while( *str )
 482:	f0 df       	rcall	.-32     	; 0x464 <UART0_putchar>
 484:	89 91       	ld	r24, Y+
 486:	81 11       	cpse	r24, r1
	{
		UART0_putchar(*str++);
	}
}
 488:	fc cf       	rjmp	.-8      	; 0x482 <UART0_puts+0xe>
 48a:	df 91       	pop	r29
 48c:	cf 91       	pop	r28
 48e:	08 95       	ret

00000490 <UART0_getchar>:
	while( !(UCSR0A&(1<<UDRE0)) );
	UDR0 = dato;
}
char UART0_getchar( void )
{
	while( !(UCSR0A&(1<<RXC0)) );
 490:	e0 ec       	ldi	r30, 0xC0	; 192
 492:	f0 e0       	ldi	r31, 0x00	; 0
 494:	80 81       	ld	r24, Z
 496:	88 23       	and	r24, r24
 498:	ec f7       	brge	.-6      	; 0x494 <UART0_getchar+0x4>
	return UDR0;
 49a:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
}
 49e:	08 95       	ret

000004a0 <UART0_gets>:
void UART0_gets( char *str )
{
 4a0:	ef 92       	push	r14
 4a2:	ff 92       	push	r15
 4a4:	0f 93       	push	r16
 4a6:	1f 93       	push	r17
 4a8:	cf 93       	push	r28
 4aa:	8c 01       	movw	r16, r24
	char dato;
	int cnt = 0;
	while( dato != 13)
 4ac:	e1 2c       	mov	r14, r1
	{
		dato = UART0_getchar();
 4ae:	f1 2c       	mov	r15, r1
 4b0:	ef df       	rcall	.-34     	; 0x490 <UART0_getchar>
		if(dato != 8 && dato != 13)
 4b2:	c8 2f       	mov	r28, r24
 4b4:	88 30       	cpi	r24, 0x08	; 8
 4b6:	59 f0       	breq	.+22     	; 0x4ce <UART0_gets+0x2e>
		{
			UART0_putchar(dato);
 4b8:	8d 30       	cpi	r24, 0x0D	; 13
 4ba:	b1 f0       	breq	.+44     	; 0x4e8 <UART0_gets+0x48>
			*str++ = dato;
 4bc:	d3 df       	rcall	.-90     	; 0x464 <UART0_putchar>
 4be:	f8 01       	movw	r30, r16
			cnt++;
 4c0:	c0 83       	st	Z, r28
 4c2:	ff ef       	ldi	r31, 0xFF	; 255
 4c4:	ef 1a       	sub	r14, r31
	{
		dato = UART0_getchar();
		if(dato != 8 && dato != 13)
		{
			UART0_putchar(dato);
			*str++ = dato;
 4c6:	ff 0a       	sbc	r15, r31
 4c8:	0f 5f       	subi	r16, 0xFF	; 255
			cnt++;
 4ca:	1f 4f       	sbci	r17, 0xFF	; 255

		}else if(dato == 8 && cnt >0 )
 4cc:	f1 cf       	rjmp	.-30     	; 0x4b0 <UART0_gets+0x10>
 4ce:	1e 14       	cp	r1, r14
		{
			UART0_putchar('\b');
 4d0:	1f 04       	cpc	r1, r15
			UART0_putchar(' ');
 4d2:	74 f7       	brge	.-36     	; 0x4b0 <UART0_gets+0x10>
 4d4:	88 e0       	ldi	r24, 0x08	; 8
			UART0_putchar(8);
 4d6:	c6 df       	rcall	.-116    	; 0x464 <UART0_putchar>
 4d8:	80 e2       	ldi	r24, 0x20	; 32
 4da:	c4 df       	rcall	.-120    	; 0x464 <UART0_putchar>
			*--str = ('\0');
 4dc:	88 e0       	ldi	r24, 0x08	; 8
 4de:	c2 df       	rcall	.-124    	; 0x464 <UART0_putchar>
 4e0:	f8 01       	movw	r30, r16
 4e2:	12 92       	st	-Z, r1
		}
	}
	*str = '\0';
 4e4:	8f 01       	movw	r16, r30
 4e6:	e4 cf       	rjmp	.-56     	; 0x4b0 <UART0_gets+0x10>
}
 4e8:	f8 01       	movw	r30, r16
 4ea:	10 82       	st	Z, r1
 4ec:	cf 91       	pop	r28
 4ee:	1f 91       	pop	r17
 4f0:	0f 91       	pop	r16
 4f2:	ff 90       	pop	r15
 4f4:	ef 90       	pop	r14
 4f6:	08 95       	ret

000004f8 <main>:
int main(void)
{
	uint16_t lectura;
	uint8_t op,nbit, valor, pwm0,pwm1;

    ADC_init();
 4f8:	15 de       	rcall	.-982    	; 0x124 <ADC_init>
 4fa:	7d de       	rcall	.-774    	; 0x1f6 <PWM_init>
 4fc:	a3 df       	rcall	.-186    	; 0x444 <UART0_init>
 4fe:	0f 2e       	mov	r0, r31
 500:	f0 ed       	ldi	r31, 0xD0	; 208
 502:	af 2e       	mov	r10, r31
 504:	f3 e0       	ldi	r31, 0x03	; 3
 506:	bf 2e       	mov	r11, r31
 508:	f0 2d       	mov	r31, r0
 50a:	0f 2e       	mov	r0, r31
 50c:	f4 e6       	ldi	r31, 0x64	; 100
 50e:	cf 2e       	mov	r12, r31
 510:	d1 2c       	mov	r13, r1
 512:	f0 2d       	mov	r31, r0
 514:	ee 24       	eor	r14, r14
 516:	e3 94       	inc	r14
 518:	f1 2c       	mov	r15, r1
 51a:	03 e0       	ldi	r16, 0x03	; 3
 51c:	8c e3       	ldi	r24, 0x3C	; 60
 51e:	92 e0       	ldi	r25, 0x02	; 2
 520:	a9 df       	rcall	.-174    	; 0x474 <UART0_puts>
 522:	8e e2       	ldi	r24, 0x2E	; 46
 524:	93 e0       	ldi	r25, 0x03	; 3
 526:	bc df       	rcall	.-136    	; 0x4a0 <UART0_gets>
 528:	8e e2       	ldi	r24, 0x2E	; 46
 52a:	93 e0       	ldi	r25, 0x03	; 3
 52c:	57 df       	rcall	.-338    	; 0x3dc <breakstr>
 52e:	82 e4       	ldi	r24, 0x42	; 66
 530:	93 e0       	ldi	r25, 0x03	; 3
 532:	92 de       	rcall	.-732    	; 0x258 <getCommand>
 534:	c8 2f       	mov	r28, r24
 536:	8c e4       	ldi	r24, 0x4C	; 76
 538:	93 e0       	ldi	r25, 0x03	; 3
 53a:	ae de       	rcall	.-676    	; 0x298 <atoi>
 53c:	d8 2f       	mov	r29, r24
 53e:	c4 30       	cpi	r28, 0x04	; 4
 540:	20 f4       	brcc	.+8      	; 0x54a <main+0x52>
 542:	86 e5       	ldi	r24, 0x56	; 86
 544:	93 e0       	ldi	r25, 0x03	; 3
 546:	a8 de       	rcall	.-688    	; 0x298 <atoi>
 548:	18 2f       	mov	r17, r24
 54a:	c2 30       	cpi	r28, 0x02	; 2
 54c:	31 f1       	breq	.+76     	; 0x59a <main+0xa2>
 54e:	28 f4       	brcc	.+10     	; 0x55a <main+0x62>
 550:	cc 23       	and	r28, r28
 552:	59 f0       	breq	.+22     	; 0x56a <main+0x72>
 554:	c1 30       	cpi	r28, 0x01	; 1
 556:	a9 f0       	breq	.+42     	; 0x582 <main+0x8a>
 558:	90 c0       	rjmp	.+288    	; 0x67a <main+0x182>
 55a:	c4 30       	cpi	r28, 0x04	; 4
 55c:	09 f4       	brne	.+2      	; 0x560 <main+0x68>
 55e:	6c c0       	rjmp	.+216    	; 0x638 <main+0x140>
 560:	78 f1       	brcs	.+94     	; 0x5c0 <main+0xc8>
 562:	c5 30       	cpi	r28, 0x05	; 5
 564:	09 f4       	brne	.+2      	; 0x568 <main+0x70>
 566:	75 c0       	rjmp	.+234    	; 0x652 <main+0x15a>
 568:	88 c0       	rjmp	.+272    	; 0x67a <main+0x182>
 56a:	d8 30       	cpi	r29, 0x08	; 8
 56c:	30 f4       	brcc	.+12     	; 0x57a <main+0x82>
 56e:	12 30       	cpi	r17, 0x02	; 2
 570:	20 f4       	brcc	.+8      	; 0x57a <main+0x82>
 572:	61 2f       	mov	r22, r17
 574:	8d 2f       	mov	r24, r29
 576:	fa dd       	rcall	.-1036   	; 0x16c <configBit>
 578:	d1 cf       	rjmp	.-94     	; 0x51c <main+0x24>
 57a:	84 e5       	ldi	r24, 0x54	; 84
 57c:	92 e0       	ldi	r25, 0x02	; 2
 57e:	7a df       	rcall	.-268    	; 0x474 <UART0_puts>
 580:	cd cf       	rjmp	.-102    	; 0x51c <main+0x24>
 582:	d8 30       	cpi	r29, 0x08	; 8
 584:	30 f4       	brcc	.+12     	; 0x592 <main+0x9a>
 586:	12 30       	cpi	r17, 0x02	; 2
 588:	20 f4       	brcc	.+8      	; 0x592 <main+0x9a>
 58a:	61 2f       	mov	r22, r17
 58c:	8d 2f       	mov	r24, r29
 58e:	16 de       	rcall	.-980    	; 0x1bc <writeBit>
 590:	c5 cf       	rjmp	.-118    	; 0x51c <main+0x24>
 592:	84 e5       	ldi	r24, 0x54	; 84
 594:	92 e0       	ldi	r25, 0x02	; 2
 596:	6e df       	rcall	.-292    	; 0x474 <UART0_puts>
 598:	c1 cf       	rjmp	.-126    	; 0x51c <main+0x24>
 59a:	d8 30       	cpi	r29, 0x08	; 8
 59c:	68 f4       	brcc	.+26     	; 0x5b8 <main+0xc0>
 59e:	81 e5       	ldi	r24, 0x51	; 81
 5a0:	92 e0       	ldi	r25, 0x02	; 2
 5a2:	68 df       	rcall	.-304    	; 0x474 <UART0_puts>
 5a4:	8d 2f       	mov	r24, r29
 5a6:	ff dd       	rcall	.-1026   	; 0x1a6 <readBit>
 5a8:	88 23       	and	r24, r24
 5aa:	19 f0       	breq	.+6      	; 0x5b2 <main+0xba>
 5ac:	81 e3       	ldi	r24, 0x31	; 49
 5ae:	5a df       	rcall	.-332    	; 0x464 <UART0_putchar>
 5b0:	b5 cf       	rjmp	.-150    	; 0x51c <main+0x24>
 5b2:	80 e3       	ldi	r24, 0x30	; 48
 5b4:	57 df       	rcall	.-338    	; 0x464 <UART0_putchar>
 5b6:	b2 cf       	rjmp	.-156    	; 0x51c <main+0x24>
 5b8:	8c e7       	ldi	r24, 0x7C	; 124
 5ba:	92 e0       	ldi	r25, 0x02	; 2
 5bc:	5b df       	rcall	.-330    	; 0x474 <UART0_puts>
 5be:	ae cf       	rjmp	.-164    	; 0x51c <main+0x24>
 5c0:	d2 30       	cpi	r29, 0x02	; 2
 5c2:	08 f0       	brcs	.+2      	; 0x5c6 <main+0xce>
 5c4:	35 c0       	rjmp	.+106    	; 0x630 <main+0x138>
 5c6:	15 36       	cpi	r17, 0x65	; 101
 5c8:	98 f5       	brcc	.+102    	; 0x630 <main+0x138>
 5ca:	85 b5       	in	r24, 0x25	; 37
 5cc:	81 11       	cpse	r24, r1
 5ce:	02 c0       	rjmp	.+4      	; 0x5d4 <main+0xdc>
 5d0:	05 bd       	out	0x25, r16	; 37
 5d2:	a4 cf       	rjmp	.-184    	; 0x51c <main+0x24>
 5d4:	dd 23       	and	r29, r29
 5d6:	b1 f0       	breq	.+44     	; 0x604 <main+0x10c>
 5d8:	1a 9d       	mul	r17, r10
 5da:	c0 01       	movw	r24, r0
 5dc:	1b 9d       	mul	r17, r11
 5de:	90 0d       	add	r25, r0
 5e0:	11 24       	eor	r1, r1
 5e2:	b6 01       	movw	r22, r12
 5e4:	84 d1       	rcall	.+776    	; 0x8ee <__divmodhi4>
 5e6:	c7 01       	movw	r24, r14
 5e8:	82 d1       	rcall	.+772    	; 0x8ee <__divmodhi4>
 5ea:	07 2e       	mov	r0, r23
 5ec:	00 0c       	add	r0, r0
 5ee:	88 0b       	sbc	r24, r24
 5f0:	99 0b       	sbc	r25, r25
 5f2:	dd d0       	rcall	.+442    	; 0x7ae <__floatsisf>
 5f4:	2d eb       	ldi	r18, 0xBD	; 189
 5f6:	37 e3       	ldi	r19, 0x37	; 55
 5f8:	46 e8       	ldi	r20, 0x86	; 134
 5fa:	56 e3       	ldi	r21, 0x36	; 54
 5fc:	42 d0       	rcall	.+132    	; 0x682 <__divsf3>
 5fe:	a9 d0       	rcall	.+338    	; 0x752 <__fixunssfsi>
 600:	68 bd       	out	0x28, r22	; 40
 602:	8c cf       	rjmp	.-232    	; 0x51c <main+0x24>
 604:	1a 9d       	mul	r17, r10
 606:	c0 01       	movw	r24, r0
 608:	1b 9d       	mul	r17, r11
 60a:	90 0d       	add	r25, r0
 60c:	11 24       	eor	r1, r1
 60e:	b6 01       	movw	r22, r12
 610:	6e d1       	rcall	.+732    	; 0x8ee <__divmodhi4>
 612:	c7 01       	movw	r24, r14
 614:	6c d1       	rcall	.+728    	; 0x8ee <__divmodhi4>
 616:	07 2e       	mov	r0, r23
 618:	00 0c       	add	r0, r0
 61a:	88 0b       	sbc	r24, r24
 61c:	99 0b       	sbc	r25, r25
 61e:	c7 d0       	rcall	.+398    	; 0x7ae <__floatsisf>
 620:	2d eb       	ldi	r18, 0xBD	; 189
 622:	37 e3       	ldi	r19, 0x37	; 55
 624:	46 e8       	ldi	r20, 0x86	; 134
 626:	56 e3       	ldi	r21, 0x36	; 54
 628:	2c d0       	rcall	.+88     	; 0x682 <__divsf3>
 62a:	93 d0       	rcall	.+294    	; 0x752 <__fixunssfsi>
 62c:	67 bd       	out	0x27, r22	; 39
 62e:	76 cf       	rjmp	.-276    	; 0x51c <main+0x24>
 630:	8c e7       	ldi	r24, 0x7C	; 124
 632:	92 e0       	ldi	r25, 0x02	; 2
 634:	1f df       	rcall	.-450    	; 0x474 <UART0_puts>
 636:	72 cf       	rjmp	.-284    	; 0x51c <main+0x24>
 638:	d2 30       	cpi	r29, 0x02	; 2
 63a:	38 f4       	brcc	.+14     	; 0x64a <main+0x152>
 63c:	85 b5       	in	r24, 0x25	; 37
 63e:	81 11       	cpse	r24, r1
 640:	6d cf       	rjmp	.-294    	; 0x51c <main+0x24>
 642:	83 ea       	ldi	r24, 0xA3	; 163
 644:	92 e0       	ldi	r25, 0x02	; 2
 646:	16 df       	rcall	.-468    	; 0x474 <UART0_puts>
 648:	69 cf       	rjmp	.-302    	; 0x51c <main+0x24>
 64a:	8e eb       	ldi	r24, 0xBE	; 190
 64c:	92 e0       	ldi	r25, 0x02	; 2
 64e:	12 df       	rcall	.-476    	; 0x474 <UART0_puts>
 650:	65 cf       	rjmp	.-310    	; 0x51c <main+0x24>
 652:	d8 30       	cpi	r29, 0x08	; 8
 654:	70 f4       	brcc	.+28     	; 0x672 <main+0x17a>
 656:	8d 2f       	mov	r24, r29
 658:	6f dd       	rcall	.-1314   	; 0x138 <ADC_read>
 65a:	4a e0       	ldi	r20, 0x0A	; 10
 65c:	bc 01       	movw	r22, r24
 65e:	84 e2       	ldi	r24, 0x24	; 36
 660:	93 e0       	ldi	r25, 0x03	; 3
 662:	36 de       	rcall	.-916    	; 0x2d0 <itoa>
 664:	8c ee       	ldi	r24, 0xEC	; 236
 666:	92 e0       	ldi	r25, 0x02	; 2
 668:	05 df       	rcall	.-502    	; 0x474 <UART0_puts>
 66a:	84 e2       	ldi	r24, 0x24	; 36
 66c:	93 e0       	ldi	r25, 0x03	; 3
 66e:	02 df       	rcall	.-508    	; 0x474 <UART0_puts>
 670:	55 cf       	rjmp	.-342    	; 0x51c <main+0x24>
 672:	8c e7       	ldi	r24, 0x7C	; 124
 674:	92 e0       	ldi	r25, 0x02	; 2
 676:	fe de       	rcall	.-516    	; 0x474 <UART0_puts>
 678:	51 cf       	rjmp	.-350    	; 0x51c <main+0x24>
 67a:	80 e1       	ldi	r24, 0x10	; 16
 67c:	93 e0       	ldi	r25, 0x03	; 3
 67e:	fa de       	rcall	.-524    	; 0x474 <UART0_puts>
 680:	4d cf       	rjmp	.-358    	; 0x51c <main+0x24>

00000682 <__divsf3>:
 682:	0c d0       	rcall	.+24     	; 0x69c <__divsf3x>
 684:	e6 c0       	rjmp	.+460    	; 0x852 <__fp_round>
 686:	de d0       	rcall	.+444    	; 0x844 <__fp_pscB>
 688:	40 f0       	brcs	.+16     	; 0x69a <__divsf3+0x18>
 68a:	d5 d0       	rcall	.+426    	; 0x836 <__fp_pscA>
 68c:	30 f0       	brcs	.+12     	; 0x69a <__divsf3+0x18>
 68e:	21 f4       	brne	.+8      	; 0x698 <__divsf3+0x16>
 690:	5f 3f       	cpi	r21, 0xFF	; 255
 692:	19 f0       	breq	.+6      	; 0x69a <__divsf3+0x18>
 694:	c7 c0       	rjmp	.+398    	; 0x824 <__fp_inf>
 696:	51 11       	cpse	r21, r1
 698:	10 c1       	rjmp	.+544    	; 0x8ba <__fp_szero>
 69a:	ca c0       	rjmp	.+404    	; 0x830 <__fp_nan>

0000069c <__divsf3x>:
 69c:	eb d0       	rcall	.+470    	; 0x874 <__fp_split3>
 69e:	98 f3       	brcs	.-26     	; 0x686 <__divsf3+0x4>

000006a0 <__divsf3_pse>:
 6a0:	99 23       	and	r25, r25
 6a2:	c9 f3       	breq	.-14     	; 0x696 <__divsf3+0x14>
 6a4:	55 23       	and	r21, r21
 6a6:	b1 f3       	breq	.-20     	; 0x694 <__divsf3+0x12>
 6a8:	95 1b       	sub	r25, r21
 6aa:	55 0b       	sbc	r21, r21
 6ac:	bb 27       	eor	r27, r27
 6ae:	aa 27       	eor	r26, r26
 6b0:	62 17       	cp	r22, r18
 6b2:	73 07       	cpc	r23, r19
 6b4:	84 07       	cpc	r24, r20
 6b6:	38 f0       	brcs	.+14     	; 0x6c6 <__divsf3_pse+0x26>
 6b8:	9f 5f       	subi	r25, 0xFF	; 255
 6ba:	5f 4f       	sbci	r21, 0xFF	; 255
 6bc:	22 0f       	add	r18, r18
 6be:	33 1f       	adc	r19, r19
 6c0:	44 1f       	adc	r20, r20
 6c2:	aa 1f       	adc	r26, r26
 6c4:	a9 f3       	breq	.-22     	; 0x6b0 <__divsf3_pse+0x10>
 6c6:	33 d0       	rcall	.+102    	; 0x72e <__divsf3_pse+0x8e>
 6c8:	0e 2e       	mov	r0, r30
 6ca:	3a f0       	brmi	.+14     	; 0x6da <__divsf3_pse+0x3a>
 6cc:	e0 e8       	ldi	r30, 0x80	; 128
 6ce:	30 d0       	rcall	.+96     	; 0x730 <__divsf3_pse+0x90>
 6d0:	91 50       	subi	r25, 0x01	; 1
 6d2:	50 40       	sbci	r21, 0x00	; 0
 6d4:	e6 95       	lsr	r30
 6d6:	00 1c       	adc	r0, r0
 6d8:	ca f7       	brpl	.-14     	; 0x6cc <__divsf3_pse+0x2c>
 6da:	29 d0       	rcall	.+82     	; 0x72e <__divsf3_pse+0x8e>
 6dc:	fe 2f       	mov	r31, r30
 6de:	27 d0       	rcall	.+78     	; 0x72e <__divsf3_pse+0x8e>
 6e0:	66 0f       	add	r22, r22
 6e2:	77 1f       	adc	r23, r23
 6e4:	88 1f       	adc	r24, r24
 6e6:	bb 1f       	adc	r27, r27
 6e8:	26 17       	cp	r18, r22
 6ea:	37 07       	cpc	r19, r23
 6ec:	48 07       	cpc	r20, r24
 6ee:	ab 07       	cpc	r26, r27
 6f0:	b0 e8       	ldi	r27, 0x80	; 128
 6f2:	09 f0       	breq	.+2      	; 0x6f6 <__divsf3_pse+0x56>
 6f4:	bb 0b       	sbc	r27, r27
 6f6:	80 2d       	mov	r24, r0
 6f8:	bf 01       	movw	r22, r30
 6fa:	ff 27       	eor	r31, r31
 6fc:	93 58       	subi	r25, 0x83	; 131
 6fe:	5f 4f       	sbci	r21, 0xFF	; 255
 700:	2a f0       	brmi	.+10     	; 0x70c <__divsf3_pse+0x6c>
 702:	9e 3f       	cpi	r25, 0xFE	; 254
 704:	51 05       	cpc	r21, r1
 706:	68 f0       	brcs	.+26     	; 0x722 <__divsf3_pse+0x82>
 708:	8d c0       	rjmp	.+282    	; 0x824 <__fp_inf>
 70a:	d7 c0       	rjmp	.+430    	; 0x8ba <__fp_szero>
 70c:	5f 3f       	cpi	r21, 0xFF	; 255
 70e:	ec f3       	brlt	.-6      	; 0x70a <__divsf3_pse+0x6a>
 710:	98 3e       	cpi	r25, 0xE8	; 232
 712:	dc f3       	brlt	.-10     	; 0x70a <__divsf3_pse+0x6a>
 714:	86 95       	lsr	r24
 716:	77 95       	ror	r23
 718:	67 95       	ror	r22
 71a:	b7 95       	ror	r27
 71c:	f7 95       	ror	r31
 71e:	9f 5f       	subi	r25, 0xFF	; 255
 720:	c9 f7       	brne	.-14     	; 0x714 <__divsf3_pse+0x74>
 722:	88 0f       	add	r24, r24
 724:	91 1d       	adc	r25, r1
 726:	96 95       	lsr	r25
 728:	87 95       	ror	r24
 72a:	97 f9       	bld	r25, 7
 72c:	08 95       	ret
 72e:	e1 e0       	ldi	r30, 0x01	; 1
 730:	66 0f       	add	r22, r22
 732:	77 1f       	adc	r23, r23
 734:	88 1f       	adc	r24, r24
 736:	bb 1f       	adc	r27, r27
 738:	62 17       	cp	r22, r18
 73a:	73 07       	cpc	r23, r19
 73c:	84 07       	cpc	r24, r20
 73e:	ba 07       	cpc	r27, r26
 740:	20 f0       	brcs	.+8      	; 0x74a <__divsf3_pse+0xaa>
 742:	62 1b       	sub	r22, r18
 744:	73 0b       	sbc	r23, r19
 746:	84 0b       	sbc	r24, r20
 748:	ba 0b       	sbc	r27, r26
 74a:	ee 1f       	adc	r30, r30
 74c:	88 f7       	brcc	.-30     	; 0x730 <__divsf3_pse+0x90>
 74e:	e0 95       	com	r30
 750:	08 95       	ret

00000752 <__fixunssfsi>:
 752:	98 d0       	rcall	.+304    	; 0x884 <__fp_splitA>
 754:	88 f0       	brcs	.+34     	; 0x778 <__fixunssfsi+0x26>
 756:	9f 57       	subi	r25, 0x7F	; 127
 758:	90 f0       	brcs	.+36     	; 0x77e <__fixunssfsi+0x2c>
 75a:	b9 2f       	mov	r27, r25
 75c:	99 27       	eor	r25, r25
 75e:	b7 51       	subi	r27, 0x17	; 23
 760:	a0 f0       	brcs	.+40     	; 0x78a <__fixunssfsi+0x38>
 762:	d1 f0       	breq	.+52     	; 0x798 <__fixunssfsi+0x46>
 764:	66 0f       	add	r22, r22
 766:	77 1f       	adc	r23, r23
 768:	88 1f       	adc	r24, r24
 76a:	99 1f       	adc	r25, r25
 76c:	1a f0       	brmi	.+6      	; 0x774 <__fixunssfsi+0x22>
 76e:	ba 95       	dec	r27
 770:	c9 f7       	brne	.-14     	; 0x764 <__fixunssfsi+0x12>
 772:	12 c0       	rjmp	.+36     	; 0x798 <__fixunssfsi+0x46>
 774:	b1 30       	cpi	r27, 0x01	; 1
 776:	81 f0       	breq	.+32     	; 0x798 <__fixunssfsi+0x46>
 778:	9f d0       	rcall	.+318    	; 0x8b8 <__fp_zero>
 77a:	b1 e0       	ldi	r27, 0x01	; 1
 77c:	08 95       	ret
 77e:	9c c0       	rjmp	.+312    	; 0x8b8 <__fp_zero>
 780:	67 2f       	mov	r22, r23
 782:	78 2f       	mov	r23, r24
 784:	88 27       	eor	r24, r24
 786:	b8 5f       	subi	r27, 0xF8	; 248
 788:	39 f0       	breq	.+14     	; 0x798 <__fixunssfsi+0x46>
 78a:	b9 3f       	cpi	r27, 0xF9	; 249
 78c:	cc f3       	brlt	.-14     	; 0x780 <__fixunssfsi+0x2e>
 78e:	86 95       	lsr	r24
 790:	77 95       	ror	r23
 792:	67 95       	ror	r22
 794:	b3 95       	inc	r27
 796:	d9 f7       	brne	.-10     	; 0x78e <__fixunssfsi+0x3c>
 798:	3e f4       	brtc	.+14     	; 0x7a8 <__fixunssfsi+0x56>
 79a:	90 95       	com	r25
 79c:	80 95       	com	r24
 79e:	70 95       	com	r23
 7a0:	61 95       	neg	r22
 7a2:	7f 4f       	sbci	r23, 0xFF	; 255
 7a4:	8f 4f       	sbci	r24, 0xFF	; 255
 7a6:	9f 4f       	sbci	r25, 0xFF	; 255
 7a8:	08 95       	ret

000007aa <__floatunsisf>:
 7aa:	e8 94       	clt
 7ac:	09 c0       	rjmp	.+18     	; 0x7c0 <__floatsisf+0x12>

000007ae <__floatsisf>:
 7ae:	97 fb       	bst	r25, 7
 7b0:	3e f4       	brtc	.+14     	; 0x7c0 <__floatsisf+0x12>
 7b2:	90 95       	com	r25
 7b4:	80 95       	com	r24
 7b6:	70 95       	com	r23
 7b8:	61 95       	neg	r22
 7ba:	7f 4f       	sbci	r23, 0xFF	; 255
 7bc:	8f 4f       	sbci	r24, 0xFF	; 255
 7be:	9f 4f       	sbci	r25, 0xFF	; 255
 7c0:	99 23       	and	r25, r25
 7c2:	a9 f0       	breq	.+42     	; 0x7ee <__floatsisf+0x40>
 7c4:	f9 2f       	mov	r31, r25
 7c6:	96 e9       	ldi	r25, 0x96	; 150
 7c8:	bb 27       	eor	r27, r27
 7ca:	93 95       	inc	r25
 7cc:	f6 95       	lsr	r31
 7ce:	87 95       	ror	r24
 7d0:	77 95       	ror	r23
 7d2:	67 95       	ror	r22
 7d4:	b7 95       	ror	r27
 7d6:	f1 11       	cpse	r31, r1
 7d8:	f8 cf       	rjmp	.-16     	; 0x7ca <__floatsisf+0x1c>
 7da:	fa f4       	brpl	.+62     	; 0x81a <__floatsisf+0x6c>
 7dc:	bb 0f       	add	r27, r27
 7de:	11 f4       	brne	.+4      	; 0x7e4 <__floatsisf+0x36>
 7e0:	60 ff       	sbrs	r22, 0
 7e2:	1b c0       	rjmp	.+54     	; 0x81a <__floatsisf+0x6c>
 7e4:	6f 5f       	subi	r22, 0xFF	; 255
 7e6:	7f 4f       	sbci	r23, 0xFF	; 255
 7e8:	8f 4f       	sbci	r24, 0xFF	; 255
 7ea:	9f 4f       	sbci	r25, 0xFF	; 255
 7ec:	16 c0       	rjmp	.+44     	; 0x81a <__floatsisf+0x6c>
 7ee:	88 23       	and	r24, r24
 7f0:	11 f0       	breq	.+4      	; 0x7f6 <__floatsisf+0x48>
 7f2:	96 e9       	ldi	r25, 0x96	; 150
 7f4:	11 c0       	rjmp	.+34     	; 0x818 <__floatsisf+0x6a>
 7f6:	77 23       	and	r23, r23
 7f8:	21 f0       	breq	.+8      	; 0x802 <__floatsisf+0x54>
 7fa:	9e e8       	ldi	r25, 0x8E	; 142
 7fc:	87 2f       	mov	r24, r23
 7fe:	76 2f       	mov	r23, r22
 800:	05 c0       	rjmp	.+10     	; 0x80c <__floatsisf+0x5e>
 802:	66 23       	and	r22, r22
 804:	71 f0       	breq	.+28     	; 0x822 <__floatsisf+0x74>
 806:	96 e8       	ldi	r25, 0x86	; 134
 808:	86 2f       	mov	r24, r22
 80a:	70 e0       	ldi	r23, 0x00	; 0
 80c:	60 e0       	ldi	r22, 0x00	; 0
 80e:	2a f0       	brmi	.+10     	; 0x81a <__floatsisf+0x6c>
 810:	9a 95       	dec	r25
 812:	66 0f       	add	r22, r22
 814:	77 1f       	adc	r23, r23
 816:	88 1f       	adc	r24, r24
 818:	da f7       	brpl	.-10     	; 0x810 <__floatsisf+0x62>
 81a:	88 0f       	add	r24, r24
 81c:	96 95       	lsr	r25
 81e:	87 95       	ror	r24
 820:	97 f9       	bld	r25, 7
 822:	08 95       	ret

00000824 <__fp_inf>:
 824:	97 f9       	bld	r25, 7
 826:	9f 67       	ori	r25, 0x7F	; 127
 828:	80 e8       	ldi	r24, 0x80	; 128
 82a:	70 e0       	ldi	r23, 0x00	; 0
 82c:	60 e0       	ldi	r22, 0x00	; 0
 82e:	08 95       	ret

00000830 <__fp_nan>:
 830:	9f ef       	ldi	r25, 0xFF	; 255
 832:	80 ec       	ldi	r24, 0xC0	; 192
 834:	08 95       	ret

00000836 <__fp_pscA>:
 836:	00 24       	eor	r0, r0
 838:	0a 94       	dec	r0
 83a:	16 16       	cp	r1, r22
 83c:	17 06       	cpc	r1, r23
 83e:	18 06       	cpc	r1, r24
 840:	09 06       	cpc	r0, r25
 842:	08 95       	ret

00000844 <__fp_pscB>:
 844:	00 24       	eor	r0, r0
 846:	0a 94       	dec	r0
 848:	12 16       	cp	r1, r18
 84a:	13 06       	cpc	r1, r19
 84c:	14 06       	cpc	r1, r20
 84e:	05 06       	cpc	r0, r21
 850:	08 95       	ret

00000852 <__fp_round>:
 852:	09 2e       	mov	r0, r25
 854:	03 94       	inc	r0
 856:	00 0c       	add	r0, r0
 858:	11 f4       	brne	.+4      	; 0x85e <__fp_round+0xc>
 85a:	88 23       	and	r24, r24
 85c:	52 f0       	brmi	.+20     	; 0x872 <__fp_round+0x20>
 85e:	bb 0f       	add	r27, r27
 860:	40 f4       	brcc	.+16     	; 0x872 <__fp_round+0x20>
 862:	bf 2b       	or	r27, r31
 864:	11 f4       	brne	.+4      	; 0x86a <__fp_round+0x18>
 866:	60 ff       	sbrs	r22, 0
 868:	04 c0       	rjmp	.+8      	; 0x872 <__fp_round+0x20>
 86a:	6f 5f       	subi	r22, 0xFF	; 255
 86c:	7f 4f       	sbci	r23, 0xFF	; 255
 86e:	8f 4f       	sbci	r24, 0xFF	; 255
 870:	9f 4f       	sbci	r25, 0xFF	; 255
 872:	08 95       	ret

00000874 <__fp_split3>:
 874:	57 fd       	sbrc	r21, 7
 876:	90 58       	subi	r25, 0x80	; 128
 878:	44 0f       	add	r20, r20
 87a:	55 1f       	adc	r21, r21
 87c:	59 f0       	breq	.+22     	; 0x894 <__fp_splitA+0x10>
 87e:	5f 3f       	cpi	r21, 0xFF	; 255
 880:	71 f0       	breq	.+28     	; 0x89e <__fp_splitA+0x1a>
 882:	47 95       	ror	r20

00000884 <__fp_splitA>:
 884:	88 0f       	add	r24, r24
 886:	97 fb       	bst	r25, 7
 888:	99 1f       	adc	r25, r25
 88a:	61 f0       	breq	.+24     	; 0x8a4 <__fp_splitA+0x20>
 88c:	9f 3f       	cpi	r25, 0xFF	; 255
 88e:	79 f0       	breq	.+30     	; 0x8ae <__fp_splitA+0x2a>
 890:	87 95       	ror	r24
 892:	08 95       	ret
 894:	12 16       	cp	r1, r18
 896:	13 06       	cpc	r1, r19
 898:	14 06       	cpc	r1, r20
 89a:	55 1f       	adc	r21, r21
 89c:	f2 cf       	rjmp	.-28     	; 0x882 <__fp_split3+0xe>
 89e:	46 95       	lsr	r20
 8a0:	f1 df       	rcall	.-30     	; 0x884 <__fp_splitA>
 8a2:	08 c0       	rjmp	.+16     	; 0x8b4 <__fp_splitA+0x30>
 8a4:	16 16       	cp	r1, r22
 8a6:	17 06       	cpc	r1, r23
 8a8:	18 06       	cpc	r1, r24
 8aa:	99 1f       	adc	r25, r25
 8ac:	f1 cf       	rjmp	.-30     	; 0x890 <__fp_splitA+0xc>
 8ae:	86 95       	lsr	r24
 8b0:	71 05       	cpc	r23, r1
 8b2:	61 05       	cpc	r22, r1
 8b4:	08 94       	sec
 8b6:	08 95       	ret

000008b8 <__fp_zero>:
 8b8:	e8 94       	clt

000008ba <__fp_szero>:
 8ba:	bb 27       	eor	r27, r27
 8bc:	66 27       	eor	r22, r22
 8be:	77 27       	eor	r23, r23
 8c0:	cb 01       	movw	r24, r22
 8c2:	97 f9       	bld	r25, 7
 8c4:	08 95       	ret

000008c6 <__udivmodhi4>:
 8c6:	aa 1b       	sub	r26, r26
 8c8:	bb 1b       	sub	r27, r27
 8ca:	51 e1       	ldi	r21, 0x11	; 17
 8cc:	07 c0       	rjmp	.+14     	; 0x8dc <__udivmodhi4_ep>

000008ce <__udivmodhi4_loop>:
 8ce:	aa 1f       	adc	r26, r26
 8d0:	bb 1f       	adc	r27, r27
 8d2:	a6 17       	cp	r26, r22
 8d4:	b7 07       	cpc	r27, r23
 8d6:	10 f0       	brcs	.+4      	; 0x8dc <__udivmodhi4_ep>
 8d8:	a6 1b       	sub	r26, r22
 8da:	b7 0b       	sbc	r27, r23

000008dc <__udivmodhi4_ep>:
 8dc:	88 1f       	adc	r24, r24
 8de:	99 1f       	adc	r25, r25
 8e0:	5a 95       	dec	r21
 8e2:	a9 f7       	brne	.-22     	; 0x8ce <__udivmodhi4_loop>
 8e4:	80 95       	com	r24
 8e6:	90 95       	com	r25
 8e8:	bc 01       	movw	r22, r24
 8ea:	cd 01       	movw	r24, r26
 8ec:	08 95       	ret

000008ee <__divmodhi4>:
 8ee:	97 fb       	bst	r25, 7
 8f0:	07 2e       	mov	r0, r23
 8f2:	16 f4       	brtc	.+4      	; 0x8f8 <__divmodhi4+0xa>
 8f4:	00 94       	com	r0
 8f6:	06 d0       	rcall	.+12     	; 0x904 <__divmodhi4_neg1>
 8f8:	77 fd       	sbrc	r23, 7
 8fa:	08 d0       	rcall	.+16     	; 0x90c <__divmodhi4_neg2>
 8fc:	e4 df       	rcall	.-56     	; 0x8c6 <__udivmodhi4>
 8fe:	07 fc       	sbrc	r0, 7
 900:	05 d0       	rcall	.+10     	; 0x90c <__divmodhi4_neg2>
 902:	3e f4       	brtc	.+14     	; 0x912 <__divmodhi4_exit>

00000904 <__divmodhi4_neg1>:
 904:	90 95       	com	r25
 906:	81 95       	neg	r24
 908:	9f 4f       	sbci	r25, 0xFF	; 255
 90a:	08 95       	ret

0000090c <__divmodhi4_neg2>:
 90c:	70 95       	com	r23
 90e:	61 95       	neg	r22
 910:	7f 4f       	sbci	r23, 0xFF	; 255

00000912 <__divmodhi4_exit>:
 912:	08 95       	ret

00000914 <_exit>:
 914:	f8 94       	cli

00000916 <__stop_program>:
 916:	ff cf       	rjmp	.-2      	; 0x916 <__stop_program>
